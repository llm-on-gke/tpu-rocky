#cloud-config

# This is the default VM bootstrap file for cloud TPU.

users:
  - default
  - name: tpu-runtime
    uid: 2000

write_files:
  - path: /var/scripts/set-hostname.sh
    permissions: 0444
    owner: root
    content: |
      DATA=$(hostname)
      URL=http://metadata.google.internal/computeMetadata/v1/instance/guest-attributes/deviceInfo/hostname
      curl -X PUT --data "${DATA}" -H "Metadata-Flavor: Google" ${URL}

  - path: /var/scripts/set-boot-timestamp.sh
    permissions: 0444
    owner: root
    content: |
      TIMESTAMP=$(date)
      DATA="{\"Event\":\"booted\",\"Timestamp\":\"${TIMESTAMP}\"}"
      URL=http://metadata.google.internal/computeMetadata/v1/instance/guest-attributes/lifecycle/event
      curl -X PUT --data "${DATA}" -H "Metadata-Flavor: Google" ${URL}

  - path: /var/scripts/configure-env-vars.sh
    permissions: 0444
    owner: root
    content: |
      grep -q CLOUDSDK_PYTHON /etc/environment || echo "CLOUDSDK_PYTHON=/usr/bin/python3" >> /etc/environment

      export HOME=/home/tpu-runtime
      curl -s 'http://metadata.google.internal/computeMetadata/v1/instance/attributes/tpu-env' -H 'Metadata-Flavor: Google' > /tmp/tpu-env.yaml

      eval $(python3 -c '''
      import yaml
      stream_in=open("/tmp/tpu-env.yaml", "r")
      for k,v in yaml.safe_load(stream_in).items():
        print("{var}=\"{value}\"".format(var = k, value = str(v)))
      ''' > "/${HOME}/tpu-env"
      )

      rm -f "/tmp/tpu-env.yaml"

      printenv
      cat ${HOME}/tpu-env

  - path: /var/scripts/container-restartCount.sh
    permission: 0444
    owner: root
    content: |
      CONTAINER_NAME=$1
      oldnum=$(grep $CONTAINER_NAME /var/log/restartcounts | cut -d = -f2)
      newnum=$((oldnum + 1))
      sed -i s/$CONTAINER_NAME=$oldnum/$CONTAINER_NAME=$newnum/ /var/log/restartcounts

  - path: /var/scripts/initialize-restarts.sh
    permission: 0444
    owner: root
    content: |
      if [ ! -e /var/log/restartcounts ]
      then
        touch /var/log/restartcounts
        chmod 0644 /var/log/restartcounts
        for service in cloud-ssa-agents google-fluentd google-collectd tpu-runtime healthagent monitoringagent vbarcontrolagent; do
          echo "$service=0" >> /var/log/restartcounts
        done
      fi

  - path: /var/scripts/configure-client-firewall.sh
    permissions: 0444
    owner: root
    content: |
      TPU_ALLOWED_SOURCE_IPS=$(/usr/bin/python3 /var/scripts/get-vm-metadata.py tpu-allowed-source-ips)
      IS_INFERENCE_MODE=$(/usr/bin/python3 /var/scripts/get-vm-metadata.py inference-mode)
      CUSTOMER_TO_TENANT_PORTS="8470,8466,8475"
      if [[ "$IS_INFERENCE_MODE" = "true" ]]; then
        CUSTOMER_TO_TENANT_PORTS="$CUSTOMER_TO_TENANT_PORTS,8473"
      fi
      echo "Configuring iptables for TPU client traffic with ports $CUSTOMER_TO_TENANT_PORTS"
      if [[ -n $TPU_ALLOWED_SOURCE_IPS ]]; then
        echo "setting iptables to accept traffic from $TPU_ALLOWED_SOURCE_IPS with ports $CUSTOMER_TO_TENANT_PORTS"
        iptables -w -A INPUT -p tcp -m multiport --dports $CUSTOMER_TO_TENANT_PORTS -s $TPU_ALLOWED_SOURCE_IPS -j ACCEPT
      else
        echo "setting default iptables with ports $CUSTOMER_TO_TENANT_PORTS"
        iptables -w -A INPUT -p tcp -m multiport --dports $CUSTOMER_TO_TENANT_PORTS -j ACCEPT
      fi

      PODS_PORTS="8471,8472,8474,8476,11211"
      echo "setting default iptables with ports $PODS_PORTS"
      iptables -w -A INPUT -p tcp -m multiport --dports $PODS_PORTS -j ACCEPT

      echo "setting iptables for health service"
      iptables -w -A INPUT -i eth0 -p tcp --dport 9230 -m state --state NEW,ESTABLISHED -j ACCEPT
      iptables -w -A OUTPUT -o eth0 -p tcp --sport 9230 -m state --state ESTABLISHED -j ACCEPT

  - path: /etc/systemd/system/tpu-worker-configuration.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Configure TPU Worker
      After=network-online.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/bash /var/scripts/configure-env-vars.sh
      ExecStart=/bin/bash /var/scripts/initialize-restarts.sh
      ExecStart=/bin/bash /var/scripts/configure-client-firewall.sh

      [Install]
      WantedBy=multi-user.target

  - path: /var/scripts/docker-login.sh
    permissions: 0444
    owner: root
    content: |
      METADATA=http://metadata.google.internal/computeMetadata/v1
      SVC_ACCT=$METADATA/instance/service-accounts/default
      ACCESS_TOKEN=$(/usr/bin/curl -s -H 'Metadata-Flavor: Google' $SVC_ACCT/token | cut -d'"' -f 4)

      MAX_ATTEMPTS=3
      SLEEP_SECONDS=1
      i=1
      while [ $i -lt $MAX_ATTEMPTS ]; do
        docker login --username oauth2accesstoken --password $ACCESS_TOKEN https://gcr.io
        status=$?
        echo "Docker login attempt $i, status code: $status"
        if [ $status == 0 ]; then
          break
        fi
        let i=i+1
        sleep $SLEEP_SECONDS
      done

  - path: /var/scripts/bootstrap-agent.sh
    permissions: 0444
    owner: root
    content: |
      echo "Metadata AGENT_BOOTSTRAP_IMAGE = ${AGENT_BOOTSTRAP_IMAGE}"
      if [[ -z "${AGENT_BOOTSTRAP_IMAGE}" ]]; then
        echo "Missing mandatory VM metadata: AGENT_BOOTSTRAP_IMAGE"
        exit 1
      fi
      export HOME=/home/root
      bash /var/scripts/docker-login.sh

      docker pull "${AGENT_BOOTSTRAP_IMAGE}"
      docker run \
        --oom-kill-disable=true \
        --oom-score-adj=-1000 \
        --memory=512m \
        --cpus="1.0" \
        --name "instance_agent" \
        --rm \
        --net=host \
        -v "/var/run/docker.sock:/var/run/docker.sock" \
        "${AGENT_BOOTSTRAP_IMAGE}" \
        /agents/bin/service_agent -v=1 --logtostderr \
        --enable_structured_logging \
        --control_message_source="metadata" \
        --reporting_mode="metadata" \
        --should_aggregate_scope_health \
        --image_cleaner_frequency 0s \
        --healthcheck_port 9230

  - path: /var/scripts/get-vm-metadata.py
    permissions: 0444
    owner: root
    content: |
      import sys, requests, os

      if len(sys.argv) < 2:
        sys.stderr.write('Must provide key')
        os._exit(1)

      key = sys.argv[1]
      default = None
      if len(sys.argv) > 2:
        default = sys.argv[2]

      attribute_type = 'attributes'
      if len(sys.argv) > 3:
        attribute_type = sys.argv[3]

      request = requests.get("http://metadata.google.internal/computeMetadata/v1/instance/{}/{}".format(attribute_type, key), headers={'Metadata-Flavor': 'Google'})
      if request.status_code == 200:
        print(request.text)
      elif request.status_code == 404 or request.status_code == '403':
        sys.stderr.write('Metadata key: {} does not exist\n'.format(key))
        if default:
          print(default)
      else:
        sys.stderr.write('Lookup failed with: {}'.format(request))

  - path: /etc/systemd/system/cloud-ssa-agents.service
    permissions: 0444
    owner: root
    content: |
        [Unit]
        Description=Cloud SSA Agents
        After=docker.service
        Requires=docker.service

        [Service]
        User=root
        Restart=always
        RestartSec=5
        EnvironmentFile=/home/tpu-runtime/tpu-env
        ExecStartPre=-/usr/bin/docker stop instance_agent
        ExecStartPre=-/usr/bin/docker rm instance_agent
        ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh cloud-ssa-agents
        ExecStart=/bin/sh /var/scripts/bootstrap-agent.sh
        ExecStop=-/usr/bin/docker stop instance_agent
        ExecStopPost=-/usr/bin/docker rm instance_agent
        OOMScoreAdjust=-1000

        [Install]
        WantedBy=multi-user.target

  - path: /etc/systemd/system/google-fluentd.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Fluentd container for Stackdriver Logging
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/mkdir -p /var/log/google-fluentd/
      ExecStartPre=-/usr/bin/docker rm -f google-fluentd
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=/usr/bin/docker pull $FLUENTD_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh google-fluentd
      ExecStart=/usr/bin/docker run --memory=1g --cpus="1.0" --rm --name=google-fluentd \
        --oom-kill-disable=true --oom-score-adj=-1000 \
        -v /var/log/:/var/log/ \
        -v /var/lib/docker/containers/:/var/lib/docker/containers/ \
        -v /var/log/journal/:/var/log/journal/ -v /usr/lib64/:/host/lib/ \
        -v /tmp:/tmp \
        -e FORWARD_LIBTPU_LOGS=${FORWARD_LIBTPU_LOGS} \
        -e SERVICE_NAME=${SERVICE_NAME} \
        -e CONSUMER_PROJECT_NUM=${CONSUMER_PROJECT_NUMBER} \
        -e CONSUMER_PROJECT_ID=${CONSUMER_PROJECT_ID} \
        -e ZONE=${ZONE} \
        -e NODE_ID=${NODE_ID} \
        -e WORKER_ID=${WORKER_ID} \
        -e UID=${UID} \
        -e ACCELERATOR_TYPE=${ACCELERATOR_TYPE} \
        -e TF_VERSION=${RUNTIME_VERSION} \
        -e INTERNAL=${INTERNAL} \
        -e SOURCE=${SOURCE} \
        -e PREEMPTIBLE=${PREEMPTIBLE} \
        $FLUENTD_DOCKER_URL
      Restart=on-failure
      RestartSec=5
      ExecStop=/usr/bin/docker rm -f google-fluentd
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/google-runtime-monitor.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Runtime Analyzer container
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/mkdir -p /var/log/google-runtime-monitor/
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=/usr/bin/docker pull ${RUNTIME_MONITOR_DOCKER_URL}
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh google-runtime-monitor
      # Only mount /lib64 on COS
      ExecStartPre=/bin/bash -c '/usr/bin/systemctl set-environment LIB64_MOUNT="$(grep -q "ID=cos" /etc/os-release && echo -v /lib64:/lib64:ro)"'
      ExecStart=/usr/bin/docker run --memory=512m --cpus="1.0" --rm --pid=host --net=host --privileged --name=google-runtime-monitor \
        --oom-kill-disable=true --oom-score-adj=-1000 \
        -v /var/log/:/var/log/ \
        -v /var/lib/docker/containers/:/var/lib/docker/containers/ \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /usr/lib64:/usr/lib64:ro $LIB64_MOUNT \
        -v /bin:/bin -v /usr/bin:/usr/bin \
        -v /tmp:/tmp \
        -e SERVICE_NAME=${SERVICE_NAME} \
        -e CONSUMER_PROJECT_NUM=${CONSUMER_PROJECT_NUMBER} \
        -e CONSUMER_PROJECT_ID=${CONSUMER_PROJECT_ID} \
        -e ZONE=${ZONE} \
        -e NODE_ID=${NODE_ID} \
        -e WORKER_ID=${WORKER_ID} \
        -e UID=${UID} \
        -e ACCELERATOR_TYPE=${ACCELERATOR_TYPE} \
        -e TF_VERSION=${RUNTIME_VERSION} \
        -e INTERNAL=${INTERNAL} \
        -e SOURCE=${SOURCE} \
        -e PREEMPTIBLE=${PREEMPTIBLE} \
        ${RUNTIME_MONITOR_DOCKER_URL} /runtime_monitor_files/bin/runtime_monitor --tensorflow-log="/tmp/tflogs/main.INFO" --logtostderr
      Restart=on-failure
      RestartSec=5
      ExecStop=/usr/bin/docker rm -f google-runtime-monitor
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/google-collectd.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Collectd container for Stackdriver Monitoring
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/mkdir -p /var/log/google-collectd/
      ExecStartPre=-/usr/bin/docker rm -f google-collectd
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=/usr/bin/docker pull $COLLECTD_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh google-collectd
      ExecStart=/usr/bin/docker run --net=host --memory=512m --cpus="1.0" --rm --name=google-collectd \
        --oom-kill-disable=true --oom-score-adj=-1000 \
        -v /var/log/:/var/log/ \
        -v /var/lib/docker/containers/:/var/lib/docker/containers/ \
        -v /var/log/journal/:/var/log/journal/ \
        -v /usr/lib64/:/host/lib/ \
        -v /tmp:/tmp \
        -e SERVICE_NAME=${SERVICE_NAME} \
        -e CONSUMER_PROJECT_NUM=${CONSUMER_PROJECT_NUMBER} \
        -e ZONE=${ZONE} \
        -e NODE_ID=${NODE_ID} \
        -e WORKER_ID=${WORKER_ID} \
        -e UID=${UID} \
        -e ACCELERATOR_TYPE=${ACCELERATOR_TYPE} \
        -e TF_VERSION=${RUNTIME_VERSION} \
        -e INTERNAL=${INTERNAL} \
        -e SOURCE=${SOURCE} \
        -e PREEMPTIBLE=${PREEMPTIBLE} \
        $COLLECTD_DOCKER_URL
      Restart=on-failure
      RestartSec=5
      ExecStop=/usr/bin/docker rm -f google-collectd
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  # Conditionally start the TPU runtime, which is no longer always needed.
  - path: /var/scripts/start-tpu-runtime.sh
    permissions: 0644
    owner: root
    content: |
      TPU_RT_DISABLED=$(/usr/bin/python3 /var/scripts/get-vm-metadata.py disable-tpu-runtime "false")

      # Don't start the TensorFlow runtime if it's disabled.
      if [ "${TPU_RT_DISABLED}" == "true" ]; then
        systemctl disable tpu-runtime.service
        systemctl stop tpu-runtime.service
        exit 0
      fi

      systemctl enable tpu-runtime.service
      systemctl start tpu-runtime.service

  # The TPU runtime service, referred to above
  - path: /etc/systemd/system/tpu-runtime.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=TPU Runtime & grpc server
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/bash -c "/usr/bin/systemctl set-environment TF_DOCKER_URL=$(/usr/bin/python3 /var/scripts/get-vm-metadata.py overrides/tensorflow-docker-url $(/usr/bin/python3 /var/scripts/get-vm-metadata.py tensorflow-docker-url) guest-attributes)"
      ExecStartPre=/bin/bash -c "/usr/bin/systemctl set-environment HOST_IP=$(/usr/bin/python3 /var/scripts/get-vm-metadata.py 0/ip '' network-interfaces)"
      ExecStartPre=/bin/bash -c "/usr/bin/systemctl set-environment TF_ENV_VARS=\"$(/usr/bin/python3 /var/scripts/get-vm-metadata.py tensorflow-env-vars)\""
      ExecStartPre=/bin/mkdir -p /tmp/tflogs
      ExecStartPre=/bin/chmod +r /tmp/tflogs
      ExecStartPre=/bin/chown tpu-runtime:tpu-runtime /tmp/tflogs
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=-/usr/bin/docker rm -f -v tpu-runtime
      ExecStartPre=/usr/bin/docker pull $TF_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh tpu-runtime
      ExecStart=/usr/bin/docker run --net=host --rm --name=tpu-runtime --oom-kill-disable=true --oom-score-adj=-1000 -v /tmp:/tmp --user=2000:2000 --ulimit=memlock=68719476736 --privileged=true $TF_ENV_VARS $TF_DOCKER_URL --tpu_hostname_override=${HOST_IP} --envelope_enabled=false
      ExecStop=/usr/bin/docker stop tpu-runtime
      ExecStopPost=/usr/bin/docker rm -v tpu-runtime
      Restart=on-failure
      RestartSec=5
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/healthagent.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=TPU Health Agent
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/bash -c "/usr/bin/systemctl set-environment POLL_TF_RUNTIME=\"$(/usr/bin/python3 /var/scripts/get-vm-metadata.py disable-tpu-runtime "false" | ([ $(cat) == 'false' ] && echo "true" || echo "false"))\""
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=-/usr/bin/docker rm -f -v healthagent
      ExecStartPre=/usr/bin/docker pull $HEALTH_AGENT_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh healthagent
      ExecStart=/usr/bin/docker run --memory=512m --cpus="1.0" --rm --name=healthagent --pid=host --net=host --privileged --oom-kill-disable=true --oom-score-adj=-1000 -v /usr/lib64:/usr/lib64:ro -v /lib64:/lib64:ro -v /tmp:/tmp -v /var/log/:/var/log/ -v "/var/run/docker.sock:/var/run/docker.sock" -v "/usr/bin/docker:/usr/bin/docker" $HEALTH_AGENT_DOCKER_URL tpu_agents/bin/healthAgent --check-runtime-server-health=${POLL_TF_RUNTIME} --logtostderr $MAINTENANCE_ACTION_FLAG
      ExecStop=/usr/bin/docker stop healthagent
      ExecStopPost=/usr/bin/docker rm -f -v healthagent
      Restart=on-failure
      RestartSec=5
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/monitoringagent.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=TPU Monitoring Agent
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/mkdir -p /var/log/monitoringagent
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=-/usr/bin/docker rm -f -v monitoringAgent
      ExecStartPre=/usr/bin/docker pull $MONITORING_AGENT_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh monitoringagent
      ExecStart=/usr/bin/docker run --memory=512m --cpus="1.0" --rm --name=monitoringagent --pid=host --privileged --env TPU_RUNTIME_METRICS_PORTS --oom-kill-disable=true --oom-score-adj=-1000 -v /tmp:/tmp -v /var/log/:/var/log/ -v "/var/run/docker.sock:/var/run/docker.sock" --net=host $MONITORING_AGENT_DOCKER_URL monitoring_agent/bin/monitoringAgent --logtostderr --envelope_enabled=false
      ExecStop=/usr/bin/docker stop monitoringagent
      ExecStopPost=/usr/bin/docker rm -f -v monitoringagent
      Restart=on-failure
      RestartSec=5
      OOMScoreAdjust=-1000

      [Install]
      WantedBy=multi-user.target

  - path: /etc/systemd/system/vbarcontrolagent.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=TPU VBAR Control Agent
      After=docker.service

      [Service]
      Environment="HOME=/home/tpu-runtime"
      EnvironmentFile=/home/tpu-runtime/tpu-env
      ExecStartPre=/bin/mkdir -p /var/log/vbarcontrolagent
      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
      ExecStartPre=-/usr/bin/docker rm -f -v vbarcontrolagent
      ExecStartPre=/usr/bin/docker pull $VBARCONTROL_AGENT_DOCKER_URL
      ExecStartPre=/bin/bash /var/scripts/container-restartCount.sh vbarcontrolagent
      ExecStart=/usr/bin/docker run --memory=512m --cpus="1.0" --rm --name=vbarcontrolagent --pid=host --privileged -v "/var/run/docker.sock:/var/run/docker.sock" -v /tmp:/tmp -v /var/log/:/var/log/ --net=host $VBARCONTROL_AGENT_DOCKER_URL vbar_control_agent_files/bin/vbar_control_agent --logtostderr --gid= --uid= --chroot=
      ExecStop=/usr/bin/docker stop vbarcontrolagent
      ExecStopPost=/usr/bin/docker rm -f -v vbarcontrolagent
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

  # Conditionally start the vbarcontrolagent, currently only start it for v6e.
  - path: /var/scripts/start-vbar-control-agent.sh
    permissions: 0644
    owner: root
    content: |
      curl -s 'http://metadata.google.internal/computeMetadata/v1/instance/attributes/tpu-env' -H 'Metadata-Flavor: Google' > /tmp/tpu-env # store the metadata
      TYPE=$(grep '^TYPE' /tmp/tpu-env | cut -d "'" -f 2) # get tpu type
      VBARCONTROL_AGENT_DOCKER_URL=$(grep '^VBARCONTROL_AGENT_DOCKER_URL' /tmp/tpu-env | cut -d "'" -f 2) # get vbar control docker image url

      # Only start the vbarcontrol agent for V6E and when its docker url is provided.
      if [ ${VBARCONTROL_AGENT_DOCKER_URL} != "" ]; then
        systemctl enable vbarcontrolagent.service
        systemctl start vbarcontrolagent.service
        exit 0
      fi

      systemctl disable vbarcontrolagent.service
      systemctl stop vbarcontrolagent.service

  - path: /var/lib/cloud/scripts/per-boot/enable-tx-nocache-copy.sh
    permissions: 0744
    owner: root
    content: |
      #!/bin/bash
      if [[ $(lscpu | grep -e AMD) ]]; then
        ls /sys/class/net/ | grep ens | xargs -0 -d '\n' -I % /usr/sbin/ethtool -K % tx-nocache-copy on
      fi

  - path: /var/scripts/release-capacity.sh
    permissions: 0744
    owner: root
    content: |
      #!/bin/bash
      curl -s 'http://metadata.google.internal/computeMetadata/v1/instance/attributes/tpu-env' -H 'Metadata-Flavor: Google' > /tmp/tpu-env # store the metadata
      NODE_ID=$(grep '^NODE_ID' /tmp/tpu-env | cut -d "'" -f 2) # get Node ID
      WORKER_ID=$(grep '^WORKER_ID' /tmp/tpu-env | cut -d "'" -f 2) # get Worker ID
      ZONE=$(grep '^ZONE' /tmp/tpu-env | cut -d "'" -f 2) # get VM zone
      if [ $WORKER_ID==0 ]; then
        /opt/google-cloud-sdk/bin/gcloud alpha compute tpus tpu-vm delete $NODE_ID --zone=$ZONE --quiet; # delete the node
      fi

  - path: /var/lib/cloud/scripts/per-boot/set_tcp_config.sh
    permissions: 0744
    owner: root
    content: |
      #!/bin/bash

      # Disable metrics cache
      sysctl -w net.ipv4.tcp_no_metrics_save=1

      # Disable slow start after idle
      sysctl -w net.ipv4.tcp_slow_start_after_idle=0

      # Set rto_min 5ms as default
      route=$(ip route show | sed -n 1p)

      echo "Output of 'ip route show' before tuning:"
      ip route show
      if [[ "${route}" =~ .*"rto_min lock 5ms"* ]]; then
        echo "RTO-min already set to 5ms"
      else
        echo "Setting RTO-min to 5ms"
        ip route change $route rto_min 5ms
        echo "Output of 'ip route show' after tuning:"
        ip route show
      fi

      # Increase TCP zerocopy control memory
      sysctl -w net.core.optmem_max=131072

      # Disable Cubic Hystart Ack-Train
      echo 2 > /sys/module/tcp_cubic/parameters/hystart_detect

  - path: /etc/systemd/system/docker.service.d/overrides.conf
    permisisons: 0744
    owner: root
    content: |
      [Service]
      OOMScoreAdjust=-1000

  - path: /etc/systemd/system/networkd-dispatcher.service.d/overrides.conf
    permissions: 0744
    owner: root
    content: |
      [Service]
      OOMScoreAdjust=-1000

  # Overwrite the docker default network subnet to avoid conflict with cbr0 cidr range.
  - path: /etc/docker/daemon.json
    permissions: 0644
    owner: root
    content: |
      {
        "bip": "169.254.123.1/24"
      }

runcmd:
  - /bin/bash /var/scripts/set-boot-timestamp.sh
  - /bin/bash /var/scripts/set-hostname.sh
  - systemctl daemon-reload
  - systemctl restart networkd-dispatcher.service
  - systemctl enable tpu-worker-configuration.service
  - systemctl start tpu-worker-configuration.service
  - systemctl restart docker.service
  - /bin/bash /var/scripts/start-tpu-runtime.sh
  - /bin/bash /var/scripts/start-vbar-control-agent.sh
  - systemctl start cloud-audit-setup
  - echo "root soft nofile 100000" >> /etc/security/limits.conf
  - echo "root hard nofile 100000" >> /etc/security/limits.conf

bootcmd:
- echo 0 > /proc/sys/kernel/softlockup_panic